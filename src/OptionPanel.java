import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;
import javax.swing.border.TitledBorder;
/**
 * 
 * @author aabbasimoghadd00
 * This class provides the panels with all its features when we run the java application
 */
public class OptionPanel extends JPanel {
	
	private JRadioButton r1,r2,r3;
	private JButton but;
	private JCheckBox cb;
	private ShapeComponent s;
	private JTextField tf;
	private GeometricShape gs;
	private JPanel organizer;
	double area,perimeter;
	private JColorChooser color;
	private JLabel l1, l2;

	/**
	 * The constructor that sets up the different components of our GUI The panel
	 * will have a border layout that contains the color selector in the north, the
	 * shape options to select in the west, and the panel where the shape is drawn
	 * in the center. This constructor does not need to be modified.
	 */
	public OptionPanel() {
		this.setLayout(new BorderLayout());

		this.add(buildOptions(), BorderLayout.WEST);
		this.add(shapePanel(), BorderLayout.CENTER);

		color = new JColorChooser();
		color.setPreviewPanel(new JPanel());
		this.add(color, BorderLayout.NORTH);
	}

	/**
	 * Creates a panel that has a vertical box layout. Creates a ShapeComponent
	 * object using the default constructor. Adds the ShapeComponent to the panel,
	 * along with two JLabels, one for displaying the area and one for displaying
	 * the perimeter
	 * 
	 * @return a JPanel that contains a ShapeComponent and two JLabels
	 */
	public JPanel shapePanel() {
		organizer = new JPanel();
		organizer.setLayout(new BoxLayout(organizer, BoxLayout.Y_AXIS));
		s = new ShapeComponent();
		organizer.add(s);
		 l1 = new JLabel("Area:");
		 l2 = new JLabel("Perimeter:");
		organizer.add(l1);
		organizer.add(l2);
		return organizer;
	}

	/**
	 * Creates and returns a panel with a vertical box layout. This panel should
	 * contain three radio buttons (arrow, circle, octagon) that belong to the same
	 * button group.
	 * 
	 * @return the panel the user will choose their shape from using radio buttons
	 */
	public JPanel shapeSelect() {
		JPanel organizer = new JPanel();
		organizer.setLayout(new BoxLayout(organizer, BoxLayout.Y_AXIS));
		r1 = new JRadioButton("Arrow");
		r2 = new JRadioButton("Circle");
		r3 = new JRadioButton("Octagon");
		ButtonGroup gp = new ButtonGroup();
		gp.add(r1);
		gp.add(r2);
		gp.add(r3);
		organizer.add(r1);
		organizer.add(r2);
		organizer.add(r3);
		return organizer;
	}

	/**
	 * Creates and returns a panel with a horizontal box layout. This panel should
	 * contain a label "Is Filled?" and a checkbox.
	 * 
	 * @return the panel the user will choose whether the shape is filled or not
	 *         using the check box
	 */
	public JPanel fillSelect() {
		JPanel organizer = new JPanel();
		organizer.setLayout(new BoxLayout(organizer, BoxLayout.X_AXIS));
		JLabel l1 = new JLabel("Is Filled?");
		cb = new JCheckBox();
		organizer.add(l1);
		organizer.add(cb);
		return organizer;
	}

	/**
	 * Creates and returns a panel with a horizontal box layout. This panel should
	 * contain a label asking the user to input the side length. This panel should
	 * also contain a textfield.
	 * 
	 * @return the panel the user will be able to enter the side length of the shape
	 *         into the textfield
	 */
	public JPanel lengthSelect() {
		JPanel organizer = new JPanel();
		organizer.setLayout(new BoxLayout(organizer, BoxLayout.X_AXIS));
		JLabel l1 = new JLabel("Side Lenght:");
        tf = new JTextField(1);
		organizer.add(l1);
		organizer.add(tf);
		return organizer;
	}

	/**
	 * Creates a panel that has a vertical box layout with a Titled Border that
	 * tells the user to "Select shape options" 
	 * This method should add the panels generated by
	 * shapeSelect, fillSelect, and lengthSelect. This method should also create the
	 * Draw Shape button, attach the action listener to the button, and add the
	 * button to the panel
	 * 
	 * @return a panel that contains all of the GUI options offered to the user
	 */
	public JPanel buildOptions() {
		JPanel organizer = new JPanel();
		organizer.setLayout(new BoxLayout(organizer, BoxLayout.Y_AXIS));
		TitledBorder tb = new TitledBorder("Select Shape Options");
		organizer.setBorder(tb);
		organizer.add(shapeSelect());
		organizer.add(fillSelect());
		organizer.add(lengthSelect());
		but = new JButton("Draw Shape");
		but.addActionListener(new ButtonListener());
		organizer.add(but);
		return organizer;
	}

	/**
	 * The listener class to attach to the draw button. 
	 *
	 */
	private class ButtonListener implements ActionListener {
		/**
		 * This method should use the values the user enters in the GUI to 
		 * construct a circle/octagon/arrow depending on which radio button is selected
		 * Updates the area and perimeter labels to display the correct values for the shape
		 * Accesses the ShapeComponent created in the shapePanel method and set its shape
		 * Repaints the ShapeComponent
		 */
		public void actionPerformed(ActionEvent event) {
			
			double sideL = Double.parseDouble(tf.getText());// get from textfield
			boolean fill = cb.isSelected();//get from check box
			Color c = color.getColor();// get from color panel
			
			// for drawing the shape when we check the Arrow button is clicked and drawshape button is pressed
			if(r1.isSelected()) {
				gs = new Arrow(sideL,fill,c,100,40);
				area = gs.getArea();
				perimeter = gs.getPerimeter();
			}
			
			// for drawing the shape when we check the Circle button is clicked and drawshape button is pressed
			if(r2.isSelected()) {
				gs = new Circle(sideL,fill,c,135,75);
				area = gs.getArea();
				perimeter = gs.getPerimeter();
			}
			
			// for drawing the shape when we check the Octagon button is clicked and drawshape button is pressed
			if(r3.isSelected()) {
				gs = new Octagon(sideL,fill,c,100,40);
				area = gs.getArea();
				perimeter = gs.getPerimeter();
			}
			l1.setText("Area: " + String.valueOf(area));
			l2.setText("Perimeter: " + String.valueOf(perimeter));
			s.setG(gs);
			s.repaint();
		}
	}
}